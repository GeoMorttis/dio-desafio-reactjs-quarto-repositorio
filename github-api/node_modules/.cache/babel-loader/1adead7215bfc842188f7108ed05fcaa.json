{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\dio-desafio-reactjs-quarto-repositorio\\\\github-api\\\\src\\\\providers\\\\github-providers.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from 'react';\nimport { useCallback } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    api.get(`users/${username}`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubProvider, \"ssOZUfj3yMPc92Oue+c2GduQYgc=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","api","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","login","undefined","name","html_url","blog","company","location","followers","following","public_gists","public_repos","getUser","username","get","then","data","prevState","contextValue"],"sources":["C:/workspace/dio-desafio-reactjs-quarto-repositorio/github-api/src/providers/github-providers.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport { useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\nexport const GithubContext = createContext ( {\r\n    loading: false,\r\n    user: {},\r\n    repositories: [],\r\n    starred: [],\r\n});\r\n\r\nconst GithubProvider = ({ children }) => {\r\n    const [githubState, setGithubState] = useState ({\r\n        loading: false,\r\n        user: {\r\n            login: undefined,\r\n            name: undefined,\r\n            html_url: undefined,\r\n            blog: undefined,\r\n            company: undefined,\r\n            location: undefined,\r\n            followers: 0,\r\n            following: 0,\r\n            public_gists: 0,\r\n            public_repos: 0,\r\n        },\r\n        repositories: [],\r\n        starred: [],\r\n    });\r\n\r\n    const getUser = (username) => {\r\n        api.get(`users/${username}`).then(({ data }) => {\r\n            setGithubState ((prevState) => ({ \r\n                ...prevState,\r\n                user: {\r\n                    login: data.login,\r\n                    name: data.name,\r\n                    html_url: data.html_url,\r\n                    blog: data.blog,\r\n                    company: data.company,\r\n                    location: data.location,\r\n                    followers: data.followers,\r\n                    following: data.following,\r\n                    public_gists: data.public_gists,\r\n                    public_repos: data.public_repos,\r\n                },\r\n            }));\r\n        });\r\n    };\r\n\r\n    const contextValue = {\r\n        githubState,\r\n        getUser: useCallback((username) => getUser(username), []),\r\n    };\r\n\r\n    return (\r\n        <GithubContext.Provider value={contextValue}>\r\n            {children}\r\n        </GithubContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GithubProvider; "],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAG;EACzCK,OAAO,EAAE,KADgC;EAEzCC,IAAI,EAAE,EAFmC;EAGzCC,YAAY,EAAE,EAH2B;EAIzCC,OAAO,EAAE;AAJgC,CAAH,CAAnC;;AAOP,MAAMC,cAAc,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACrC,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAE;IAC5CI,OAAO,EAAE,KADmC;IAE5CC,IAAI,EAAE;MACFO,KAAK,EAAEC,SADL;MAEFC,IAAI,EAAED,SAFJ;MAGFE,QAAQ,EAAEF,SAHR;MAIFG,IAAI,EAAEH,SAJJ;MAKFI,OAAO,EAAEJ,SALP;MAMFK,QAAQ,EAAEL,SANR;MAOFM,SAAS,EAAE,CAPT;MAQFC,SAAS,EAAE,CART;MASFC,YAAY,EAAE,CATZ;MAUFC,YAAY,EAAE;IAVZ,CAFsC;IAc5ChB,YAAY,EAAE,EAd8B;IAe5CC,OAAO,EAAE;EAfmC,CAAF,CAA9C;;EAkBA,MAAMgB,OAAO,GAAIC,QAAD,IAAc;IAC1BtB,GAAG,CAACuB,GAAJ,CAAS,SAAQD,QAAS,EAA1B,EAA6BE,IAA7B,CAAkC,SAAc;MAAA,IAAb;QAAEC;MAAF,CAAa;MAC5ChB,cAAc,CAAGiB,SAAD,KAAgB,EAC5B,GAAGA,SADyB;QAE5BvB,IAAI,EAAE;UACFO,KAAK,EAAEe,IAAI,CAACf,KADV;UAEFE,IAAI,EAAEa,IAAI,CAACb,IAFT;UAGFC,QAAQ,EAAEY,IAAI,CAACZ,QAHb;UAIFC,IAAI,EAAEW,IAAI,CAACX,IAJT;UAKFC,OAAO,EAAEU,IAAI,CAACV,OALZ;UAMFC,QAAQ,EAAES,IAAI,CAACT,QANb;UAOFC,SAAS,EAAEQ,IAAI,CAACR,SAPd;UAQFC,SAAS,EAAEO,IAAI,CAACP,SARd;UASFC,YAAY,EAAEM,IAAI,CAACN,YATjB;UAUFC,YAAY,EAAEK,IAAI,CAACL;QAVjB;MAFsB,CAAhB,CAAF,CAAd;IAeH,CAhBD;EAiBH,CAlBD;;EAoBA,MAAMO,YAAY,GAAG;IACjBnB,WADiB;IAEjBa,OAAO,EAAEtB,WAAW,CAAEuB,QAAD,IAAcD,OAAO,CAACC,QAAD,CAAtB,EAAkC,EAAlC;EAFH,CAArB;EAKA,oBACI,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEK,YAA/B;IAAA,UACKpB;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAjDD;;GAAMD,c;;KAAAA,c;AAmDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}